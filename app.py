import os
from flask import Flask, render_template, request, make_response, redirect, url_for, jsonify
import requests
from datetime import datetime
from dotenv import load_dotenv
import pandas as pd
from io import BytesIO
import re
import sys
from pathlib import Path

# –†–µ—à–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—É—Ç—è–º–∏ –ø—Ä–∏ —É–ø–∞–∫–æ–≤–∫–µ –≤ exe
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ '–∑–∞–º–æ—Ä–æ–∂–µ–Ω–æ' (—É–ø–∞–∫–æ–≤–∞–Ω–æ)
    template_dir = Path(sys._MEIPASS) / 'templates'
    static_dir = Path(sys._MEIPASS)  / 'static'
else:
    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    template_dir = Path(__file__).parent / 'app' / 'templates'
    static_dir = Path(__file__).parent / 'app' / 'static'
app = Flask(__name__, 
            template_folder=str(template_dir),
            static_folder=str(static_dir))

load_dotenv()


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', "-1002302463734")

def validate_email(email):
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email)

def validate_phone(phone):
    pattern = r'^(\+7|8)[0-9]{10}$'
    return re.match(pattern, phone)

def send_telegram_message(message):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {
            "chat_id": TELEGRAM_CHAT_ID,
            "text": message,
            "parse_mode": "Markdown"
        }
        requests.post(url, json=payload)
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram: {e}")

def send_telegram_notification(params, optimal, client_ip, download_data=None, link_clicked=False):
    try:
        ip_info = requests.get(f"http://ip-api.com/json/{client_ip}?fields=country,city,isp").json()
        city = ip_info.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        country = ip_info.get('country', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        
        if link_clicked:
            message = (
                "üîó *–ö–ª–∏–∫–Ω—É–ª–∏ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ —Å–∞–π—Ç*\n\n"
                f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üåç *–õ–æ–∫–∞—Ü–∏—è:* {city}, {country}\n"
                f"üì° *IP:* `{client_ip}`"
            )
            if download_data:
                message += (
                    "\n\nüì• *–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:*\n"
                    f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {download_data['company']}\n"
                    f"üë§ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {download_data['position']}\n"
                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {download_data['phone']}\n"
                    f"‚úâÔ∏è *Email:* {download_data['email']}"
                )
        else:
            message = (
                "üöõ *–ù–æ–≤—ã–π —Ä–∞—Å—á–µ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞*\n\n"
                f"üìÖ *–î–∞—Ç–∞:* {datetime.now().strftime('%d.%m.%Y %H:%M')}\n"
                f"üåç *–õ–æ–∫–∞—Ü–∏—è:* {city}, {country}\n"
                f"üì° *IP:* `{client_ip}`\n\n"
                f"üî¢ *–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:*\n"
                f"- –ü–∞—Ä–∫ —Ç–µ—Ö–Ω–∏–∫–∏: {params['fleet_size']} –µ–¥.\n"
                f"- –ü–æ–ª–æ–º–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è: {params['breakdowns_per_year']} –Ω–∞ –¢–°\n"
                f"- –ê–û –ø–ª–∞—Ç–∞: {params['ao_cost']} —Ä—É–±./–º–µ—Å\n\n"
                f"üèÜ *–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:* {optimal['description']}\n"
                f"üíµ *–ì–æ–¥–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã:* {format_number(optimal['next_years'])} —Ä—É–±."
            )
            
            if download_data:
                message += (
                    "\n\nüì• *–î–∞–Ω–Ω—ã–µ —Å–∫–∞—á–∞–Ω—ã:*\n"
                    f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {download_data['company']}\n"
                    f"üë§ *–î–æ–ª–∂–Ω–æ—Å—Ç—å:* {download_data['position']}\n"
                    f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {download_data['phone']}\n"
                    f"‚úâÔ∏è *Email:* {download_data['email']}"
                )
        
        send_telegram_message(message)
    except Exception as e:
        app.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def format_number(x):
    return "{:,.0f}".format(x).replace(",", " ")

def generate_excel(params, options, optimal):
    output = BytesIO()
    
    try:
        # –°–æ–∑–¥–∞–µ–º DataFrame —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        data = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        data.append(["–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"])
        data.append([])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞
        data.append(["–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å—á–µ—Ç–∞:"])
        data.append(["–†–∞–∑–º–µ—Ä –ø–∞—Ä–∫–∞ —Ç–µ—Ö–Ω–∏–∫–∏ (–µ–¥.):", params.get('fleet_size', 0)])
        data.append(["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª–æ–º–æ–∫ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –Ω–∞ 1 –¢–° –≤ –≥–æ–¥:", params.get('breakdowns_per_year', 0)])
        data.append(["–î–æ–ª—è —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö –≤—ã–µ–∑–¥–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ (%):", params.get('city_share', 0) * 100])
        data.append(["–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–º–µ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (—Ä—É–±.):", params.get('equipment_cost', 0)])
        data.append(["–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–º–µ–Ω—ã –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è (%):", params.get('replacement_rate', 0) * 100])
        data.append(["–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞ –∑–∞ 1 –¢–° (—Ä—É–±./–º–µ—Å):", params.get('ao_cost', 0)])
        data.append(["–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤—ã–µ–∑–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ (—Ä—É–±.):", params.get('service_cost_city', 0)])
        data.append(["–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ –≤—ã–µ–∑–¥–∞ –≤–Ω–µ –≥–æ—Ä–æ–¥–∞ (—Ä—É–±.):", params.get('service_cost_outside', 0)])
        data.append(["–°—Ç–æ–∏–º–æ—Å—Ç—å –ª–∏—Ü–µ–Ω–∑–∏–∏ –Ω–∞ 1 –¢–° (—Ä—É–±.):", params.get('license_cost', 0)])
        data.append(["–ì–æ–¥–æ–≤–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ü–û (%):", params.get('software_support_rate', 0) * 100])
        data.append(["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:", params.get('specialists_count', 0)])
        data.append(["–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ (—Ä—É–±./–º–µ—Å):", params.get('specialist_salary', 0)])
        data.append(["–ó–∞—Ä–ø–ª–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Å–µ—Ä–≤–µ—Ä–∞ (—Ä—É–±./–º–µ—Å):", params.get('server_admin_salary', 0)])
        data.append(["–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏ –Ω–∞ 1 –≤—ã–µ–∑–¥ (—Ä—É–±.):", params.get('consumables_cost', 0)])
        data.append([])
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
        data.append(["–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:"])
        data.append(["–í–∞—Ä–∏–∞–Ω—Ç", "–ü–µ—Ä–≤—ã–π –≥–æ–¥ (—Ä—É–±.)", "–ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –≥–æ–¥—ã (—Ä—É–±./–≥–æ–¥)", "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π"])
        
        for key, option in options.items():
            data.append([
                option.get('description', ''),
                option.get('first_year', 0),
                option.get('next_years', 0),
                '–î–∞' if key == optimal[0] else '–ù–µ—Ç'
            ])
        
        data.append([])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
        data.append(["–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞:"])
        data.append(["–°—Ç–∞—Ç—å—è –∑–∞—Ç—Ä–∞—Ç", "–°—É–º–º–∞ (—Ä—É–±.)"])
        
        for item, value in optimal[1].get('details', {}).items():
            data.append([item, value])
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        df = pd.DataFrame(data)
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–†–µ–∑—É–ª—å—Ç–∞—Ç—ã', index=False, header=False)
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            worksheet = writer.sheets['–†–µ–∑—É–ª—å—Ç–∞—Ç—ã']
            worksheet.column_dimensions['A'].width = 40
            worksheet.column_dimensions['B'].width = 20
            worksheet.column_dimensions['C'].width = 25
            worksheet.column_dimensions['D'].width = 15
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
            for row in worksheet.iter_rows(min_row=1, max_row=1):
                for cell in row:
                    cell.font = cell.font.copy(bold=True)
            
            for row in [3, 17, 19 + len(options)]:
                for cell in worksheet[row]:
                    cell.font = cell.font.copy(bold=True)

        output.seek(0)
        return output

    except Exception as e:
        app.logger.error(f"Error generating Excel: {str(e)}")
        raise

def calculate_options(params):
    options = {}
    breakdowns_total = params['fleet_size'] * params['breakdowns_per_year']
    replacements_total = breakdowns_total * params['replacement_rate']
    replacements_cost = replacements_total * params['equipment_cost']
    server_admin_cost = params['server_admin_salary'] * 1.3 * 12
    
    ao_subscription = params['fleet_size'] * params['ao_cost'] * 12
    service_city = breakdowns_total * params['city_share'] * params['service_cost_city']
    service_outside = breakdowns_total * (1 - params['city_share']) * params['service_cost_outside']
    
    options['ao_contractor'] = {
        'first_year': ao_subscription + service_city + service_outside + replacements_cost,
        'next_years': ao_subscription + service_city + service_outside + replacements_cost,
        'description': "–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ + –ø–æ–¥—Ä—è–¥—á–∏–∫–∏",
        'details': {
            '–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞': ao_subscription,
            '–í—ã–µ–∑–¥—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤': service_city + service_outside,
            '–ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': replacements_cost
        },
        'pros': [
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
            "–ù–µ –Ω—É–∂–Ω—ã —Å–≤–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
            "–û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –≤ –ê–û"
        ],
        'cons': [
            "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞",
            "–†–∏—Å–∫ —Ä–æ—Å—Ç–∞ —Ü–µ–Ω –Ω–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–ú–µ–Ω—å—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —Å–∏—Å—Ç–µ–º–æ–π"
        ]
    }
    
    specialists_cost = params['specialists_count'] * params['specialist_salary'] * 1.3 * 12
    consumables = breakdowns_total * params['consumables_cost']
    
    options['ao_inhouse'] = {
        'first_year': ao_subscription + specialists_cost + replacements_cost + consumables,
        'next_years': ao_subscription + specialists_cost + replacements_cost + consumables,
        'description': "–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ + —Å–≤–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
        'details': {
            '–ê–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è –ø–ª–∞—Ç–∞': ao_subscription,
            '–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤': specialists_cost,
            '–ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': replacements_cost,
            '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏': consumables
        },
        'pros': [
            "–ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º",
            "–ë—ã—Å—Ç—Ä–æ–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã",
            "–ì–∏–±–∫–æ—Å—Ç—å –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏"
        ],
        'cons': [
            "–í—ã—Å–æ–∫–∏–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª",
            "–ù—É–∂–Ω–æ –æ–±—É—á–∞—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤",
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞"
        ]
    }
    
    license_cost = params['fleet_size'] * params['license_cost']
    software_support = license_cost * params['software_support_rate']
    
    options['license_inhouse'] = {
        'first_year': license_cost + server_admin_cost + specialists_cost + replacements_cost + consumables + software_support,
        'next_years': server_admin_cost + specialists_cost + replacements_cost + consumables + software_support,
        'description': "–ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ü–û + —Å–≤–æ–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã",
        'details': {
            '–õ–∏—Ü–µ–Ω–∑–∏–∏ (—Ä–∞–∑–æ–≤–æ)': license_cost,
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞': server_admin_cost,
            '–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤': specialists_cost,
            '–ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': replacements_cost,
            '–†–∞—Å—Ö–æ–¥–Ω–∏–∫–∏': consumables,
            '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ü–û': software_support
        },
        'pros': [
            "–ü–æ–ª–Ω–∞—è –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å",
            "–ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –ª–∏—Ü–µ–Ω–∑–∏–∏",
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏—è"
        ],
        'cons': [
            "–í—ã—Å–æ–∫–∏–µ —Å—Ç–∞—Ä—Ç–æ–≤—ã–µ –∑–∞—Ç—Ä–∞—Ç—ã",
            "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç—å —à—Ç–∞—Ç",
            "–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ"
        ]
    }
    
    options['license_contractor'] = {
        'first_year': license_cost + server_admin_cost + service_city + service_outside + replacements_cost + software_support,
        'next_years': server_admin_cost + service_city + service_outside + replacements_cost + software_support,
        'description': "–ë–µ—Å—Å—Ä–æ—á–Ω—ã–µ –ª–∏—Ü–µ–Ω–∑–∏–∏ –ü–û + –ø–æ–¥—Ä—è–¥—á–∏–∫–∏",
        'details': {
            '–õ–∏—Ü–µ–Ω–∑–∏–∏ (—Ä–∞–∑–æ–≤–æ)': license_cost,
            '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞': server_admin_cost,
            '–í—ã–µ–∑–¥—ã –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤': service_city + service_outside,
            '–ó–∞–º–µ–Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è': replacements_cost,
            '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ü–û': software_support
        },
        'pros': [
            "–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∑–∞—Ç—Ä–∞—Ç",
            "–ù–µ –Ω—É–∂–Ω—ã —Å–≤–æ–∏ —Ä–µ–º–æ–Ω—Ç–Ω–∏–∫–∏",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ –ü–û"
        ],
        'cons': [
            "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–æ–≤",
            "–î–æ–ø. –∑–∞—Ç—Ä–∞—Ç—ã –Ω–∞ –∞–¥–º–∏–Ω–∞",
            "–†–∏—Å–∫ –Ω–µ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ä–µ–º–æ–Ω—Ç–∞"
        ]
    }
    
    return options


@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        params = {
            'fleet_size': int(request.form.get('fleet_size', 0)),
            'ao_cost': float(request.form.get('ao_cost', 0)),
            'breakdowns_per_year': float(request.form.get('breakdowns_per_year', 0)),
            'city_share': float(request.form.get('city_share', 0)) / 100,
            'service_cost_city': float(request.form.get('service_cost_city', 0)),
            'service_cost_outside': float(request.form.get('service_cost_outside', 0)),
            'equipment_cost': float(request.form.get('equipment_cost', 0)),
            'replacement_rate': float(request.form.get('replacement_rate', 0)) / 100,
            'license_cost': float(request.form.get('license_cost', 0)),
            'software_support_rate': float(request.form.get('software_support_rate', 0)) / 100,
            'specialists_count': int(request.form.get('specialists_count', 0)),
            'specialist_salary': float(request.form.get('specialist_salary', 0)),
            'server_admin_salary': float(request.form.get('server_admin_salary', 0)),
            'consumables_cost': float(request.form.get('consumables_cost', 0))
        }
        
        options = calculate_options(params)
        optimal = min(options.items(), key=lambda x: x[1]['next_years'])
        
        client_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if TELEGRAM_BOT_TOKEN:
            send_telegram_notification(params, optimal[1], client_ip.split(',')[0].strip())
        
        return render_template('result.html', 
                            params=params, 
                            options=options, 
                            optimal=optimal,
                            format_number=format_number)
    
    default_params = {
        'fleet_size': 600,
        'ao_cost': 500,
        'breakdowns_per_year': 1,
        'city_share': 80,
        'service_cost_city': 2500,
        'service_cost_outside': 3250,
        'equipment_cost': 20000,
        'replacement_rate': 10,
        'license_cost': 5000,
        'software_support_rate': 10,
        'specialists_count': 4,
        'specialist_salary': 120000,
        'server_admin_salary': 90000,
        'consumables_cost': 500
    }
    
    return render_template('form.html', params=default_params)

@app.route('/download', methods=['POST'])
def download_excel():
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        required_fields = ['company', 'position', 'phone', 'email']
        user_data = {field: request.form.get(field, '').strip() for field in required_fields}
        
        for field in required_fields:
            if not user_data[field]:
                return jsonify({"error": f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"}), 400

        if not validate_phone(user_data['phone']):
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79998887766 –∏–ª–∏ 89998887766"}), 400
            
        if not validate_email(user_data['email']):
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"}), 400

        # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ —Ñ–æ—Ä–º—ã
        params = {
            'fleet_size': int(request.form.get('fleet_size', 0)),
            'ao_cost': float(request.form.get('ao_cost', 0)),
            'breakdowns_per_year': float(request.form.get('breakdowns_per_year', 0)),
            'city_share': float(request.form.get('city_share', 0)) / 100,
            'service_cost_city': float(request.form.get('service_cost_city', 0)),
            'service_cost_outside': float(request.form.get('service_cost_outside', 0)),
            'equipment_cost': float(request.form.get('equipment_cost', 0)),
            'replacement_rate': float(request.form.get('replacement_rate', 0)) / 100,
            'license_cost': float(request.form.get('license_cost', 0)),
            'software_support_rate': float(request.form.get('software_support_rate', 0)) / 100,
            'specialists_count': int(request.form.get('specialists_count', 0)),
            'specialist_salary': float(request.form.get('specialist_salary', 0)),
            'server_admin_salary': float(request.form.get('server_admin_salary', 0)),
            'consumables_cost': float(request.form.get('consumables_cost', 0))
        }

        options = calculate_options(params)
        optimal = min(options.items(), key=lambda x: x[1]['next_years'])
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel (–±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
        excel_file = generate_excel(params, options, optimal)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        client_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        if TELEGRAM_BOT_TOKEN:
            send_telegram_notification(params, optimal[1], client_ip.split(',')[0].strip(), user_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ–∞–π–ª
        response = make_response(excel_file.getvalue())
        response.headers['Content-Type'] = 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        response.headers['Content-Disposition'] = 'attachment; filename=monitoring_calculation.xlsx'
        return response
        
    except Exception as e:
        app.logger.error(f"Error in download_excel: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"}), 500

@app.route('/feedback', methods=['POST'])
def feedback():
    try:
        feedback_data = {
            'company': request.form.get('company', '').strip(),
            'name': request.form.get('name', '').strip(),
            'phone': request.form.get('phone', '').strip(),
            'email': request.form.get('email', '').strip(),
            'message': request.form.get('message', '').strip()
        }
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        required_fields = ['company', 'name', 'phone', 'email', 'message']
        for field in required_fields:
            if not feedback_data[field]:
                return jsonify({"error": f"–ü–æ–ª–µ '{field}' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è"}), 400
        
        if not validate_phone(feedback_data['phone']):
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç +79998887766 –∏–ª–∏ 89998887766"}), 400
            
        if not validate_email(feedback_data['email']):
            return jsonify({"error": "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å"}), 400
        
        client_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        
        if TELEGRAM_BOT_TOKEN:
            message = (
                "üì£ *–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏*\n\n"
                f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è:* {feedback_data['company']}\n"
                f"üë§ *–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:* {feedback_data['name']}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {feedback_data['phone']}\n"
                f"‚úâÔ∏è *Email:* {feedback_data['email']}\n"
                f"üåê *IP:* {client_ip}\n\n"
                f"üìù *–°–æ–æ–±—â–µ–Ω–∏–µ:*\n{feedback_data['message']}"
            )
            send_telegram_message(message)
        
        return jsonify({"success": "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è."})
    except Exception as e:
        app.logger.error(f"Error in feedback: {str(e)}")
        return jsonify({"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}"}), 500

@app.route('/link_clicked', methods=['POST'])
def link_clicked():
    try:
        user_data = {
            'company': request.form.get('company', ''),
            'position': request.form.get('position', ''),
            'phone': request.form.get('phone', ''),
            'email': request.form.get('email', '')
        }
        
        client_ip = request.headers.get('X-Forwarded-For', request.remote_addr)
        
        if TELEGRAM_BOT_TOKEN:
            send_telegram_notification(None, None, client_ip.split(',')[0].strip(), 
                                     user_data if any(user_data.values()) else None, 
                                     link_clicked=True)
        
        return jsonify({"status": "success"})
    except Exception as e:
        app.logger.error(f"Error in link_clicked: {str(e)}")
        return jsonify({"error": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=9000)
else:
    application = app  # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å WSGI